{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "atto",
	"patterns": [
		{"include": "#comments"},
		{"include": "#atoms"},
		{"include": "#keywords"},
		{"include": "#numbers"},
		{"include": "#operators"},
		{"include": "#doubleQuotedStrings"},
		{"include": "#singleQuotedStrings"},
		{"include": "#backtickStrings"}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.line.atto",
					"match": "#.*"
				},
				{
					"name": "entity.comment.line.rem.atto",
					"match": "(?i)^\\s*[0-9]*\\s*(rem( .*)?)",
					"captures": {
						"1": {
							"name": "comment.line.rem.atto"
						}
					}
				}
			]
		},
		"atoms": {
			"patterns": [
				{
					"name": "constant.language.boolean.atto",
					"match": "(?i)\\b(true|false)\\b"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "entity.keyword.control.atto",
					"match": "(?i)\\s*(^[0-9]+)?\\s*\\b(goto|gosub|return|if|else|end|for|to|step|next|repeat|while|until|loop|break|continue|stop|delay|dim|with|extload|as)\\b",
					"captures": {
						"2": {
							"name": "keyword.control.atto"
						}
					}
				},
				{
					"name": "entity.name.command.declaration.atto",
					"match": "(?i)\\b(def)\\s+(\\w*[$%]?)",
					"captures": {
						"1": {
							"name": "keyword.control.atto"
						},
						"2": {
							"name": "entity.name.function.command.atto"
						}
					}
				},
				{
					"name": "entity.name.command.call.atto",
					"match": "(?i)^\\s*[0-9]*\\s*([a-z_]\\w*(\\.[a-z_]\\w*)?[$%]?)(?!\\w*[$%]?\\s*[=\\[])",
					"captures": {
						"1": {
							"name": "entity.name.function.command.atto"
						}
					}
				},
				{
					"name": "entity.name.function.atto",
					"match": "(?i)([a-z_]\\w*[$%]?)\\s*(?=\\()",
					"captures": {
						"1": {
							"name": "entity.name.function.atto"
						}
					}
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"name": "entity.other.lineNumber.atto",
					"match": "^\\s*[0-9]"
				},
				{
					"name": "constant.numeric.hexadecimal.atto",
					"match": "(?i)\\b0x[0-9a-f]+\\b"
				},
				{
					"name": "constant.numeric.binary.atto",
					"match": "(?i)\\b0b[01]+\\b"
				},
				{
					"name": "constant.numeric.octal.atto",
					"match": "(?i)\\b0o[0-7]+\\b"
				},
				{
					"name": "constant.numeric.scientific.atto",
					"match": "(?i)\\b([0-9]+\\.?[0-9]*|[0-9]*\\.?[0-9]+)([eE][+-]?[0-9]+(?!\\.))?\\b"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.atto",
					"match": "\\+|-|\\*|\\/|\\^|\\b(div|mod)\\b|&|\\||~|;"
				},
				{
					"name": "keyword.operator.comparator.atto",
					"match": "!=|<=|>=|=|<|>"
				},
				{
					"name": "keyword.operator.logical.atto",
					"match": "\\b(?:and|or|xor|not)\\b"
				}
			]
		},
		"doubleQuotedStrings": {
			"name": "string.quoted.double.atto",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.atto",
					"match": "\\\\."
				}
			]
		},
		"singleQuotedStrings": {
			"name": "string.quoted.single.atto",
			"begin": "'",
			"end": "'",
			"patterns": [
				{
					"name": "constant.character.escape.atto",
					"match": "\\\\."
				}
			]
		},
		"backtickStrings": {
			"name": "string.backtick.atto",
			"begin": "`",
			"end": "`",
			"patterns": [
				{
					"name": "constant.character.escape.atto",
					"match": "\\\\."
				}
			]
		}
	},
	"scopeName": "source.atto"
}